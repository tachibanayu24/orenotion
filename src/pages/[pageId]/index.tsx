// 効いてなさそう
import 'highlight.js/styles/github-dark-dimmed.css'

import Head from 'next/head'
import { useRouter } from 'next/router'
import { ChangeEvent, ComponentProps, useEffect, useRef, useState } from 'react'

import { format } from 'date-fns'

import { debounce } from '@/utils'

import { usePage } from '@/hooks'

import { Editor } from '@/components/uis/Editor'
import { EmojiPicker } from '@/components/uis/EmojiPicker'
import { Icon } from '@/components/uis/Icon/Icon'
import { IconButton } from '@/components/uis/Icon/IconButton/IconButton'
import { PageSkeleton } from '@/components/uis/Skeleton/PageSkeleton'
import { Toggle } from '@/components/uis/Toggle'
import { Tooltip } from '@/components/uis/Tooltip'

type QueryType = {
  pageId: string
}

// TODO: ここからsubscribeして、ページがないエラーをキャッチしたらrootに理レンダリングすればいい気がする
export default function PageDetail() {
  const router = useRouter()
  const { page, fetchPage, updatePage } = usePage()
  const editorRef = useRef<HTMLDivElement>(null)

  const { pageId } = router.query as QueryType

  const [emojiOpen, setEmojiOpen] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [isUpdating, setIsUpdating] = useState(false)

  useEffect(() => {
    if (router.isReady) {
      fetchPage(pageId).then(() => setIsLoading(false))
    } else {
      setIsLoading(true)
    }
  }, [fetchPage, page?.title, pageId, router.isReady])

  const handleUpdateEmoji = (emoji: string) => {
    updatePage(pageId, { emoji })
  }

  const handleUpdateTitle = debounce(async (e: ChangeEvent<HTMLInputElement>) => {
    setIsUpdating(true)

    await updatePage(pageId, { title: e.target.value }, () =>
      setTimeout(() => {
        setIsUpdating(false)
      }, 500)
    )
  }, 1000)

  const handleUpdatePublishedAt = async (value: boolean) => {
    setIsUpdating(true)

    await updatePage(pageId, { publishedAt: value ? new Date() : null }, () => {
      setTimeout(() => {
        setIsUpdating(false)
      }, 500)
      fetchPage(pageId)
    })
  }

  const handleUpdateContent = debounce(
    async (json: Parameters<ComponentProps<typeof Editor>['onUpdate']>[0]) => {
      setIsUpdating(true)
      await updatePage(pageId, { content: json }, () =>
        setTimeout(() => {
          setIsUpdating(false)
        }, 500)
      )
    },
    1000
  )

  const handleSaveContent = async (
    json: Parameters<ComponentProps<typeof Editor>['onUpdate']>[0]
  ) => {
    setIsUpdating(true)
    await updatePage(pageId, { content: json }, () =>
      setTimeout(() => {
        setIsUpdating(false)
      }, 500)
    )
  }

  if (isLoading) return <PageSkeleton />

  if (!page) return <>404</>

  console.log(page)

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <div className="sticky top-0 bg-slate-900 z-floating -mt-4 pt-4">
          <div className="flex justify-between items-center">
            <span className="text-sm">🎉 イベント / 🛩️ イタリア旅行</span>
            <Tooltip position="bottom-left" component="シェアする">
              <IconButton icon="twitter" size="md" />
            </Tooltip>
          </div>
          <div className="px-2 py-4">
            <div className="flex items-center gap-1 text-3xl mb-2">
              <EmojiPicker
                isOpen={emojiOpen}
                onOpen={() => setEmojiOpen(true)}
                onClose={() => setEmojiOpen(false)}
                onSelect={handleUpdateEmoji}
              >
                <button className="w-11 h-11 text-3xl p-1 hover:bg-white hover:bg-opacity-10 rounded-md">
                  {page.emoji}
                </button>
              </EmojiPicker>
              <div key={page.title} className="w-full">
                <input
                  defaultValue={page.title}
                  placeholder="Untitled"
                  onChange={handleUpdateTitle}
                  className="w-full bg-transparent font-extrabold  outline-none"
                />
              </div>
              <Toggle
                defaultChecked={Boolean(page.publishedAt)}
                label={['公開中', '未公開']}
                onChange={handleUpdatePublishedAt}
              />
            </div>
            <div className="text-xs text-slate-300 flex justify-between">
              <div>
                <span className="mr-4">
                  作成日時 {format(page.createdAt, 'yyyy/MM/dd(eee) HH:mm')}
                </span>
                <span className="mr-4">
                  公開日時{' '}
                  {page.publishedAt ? format(page.publishedAt, 'yyyy/MM/dd(eee) HH:mm') : '---'}
                </span>
                <span>
                  更新日時{' '}
                  {page.updatedAt ? format(page.updatedAt, 'yyyy/MM/dd(eee) HH:mm') : '---'}
                </span>
              </div>
              {isUpdating && (
                <span>
                  <div className="flex gap-2 items-center">
                    <Icon icon="spin" size="sm" shouldSpin /> 保存中...
                  </div>
                </span>
              )}
            </div>
          </div>
          <hr className="border-slate-500 mt-2" />
        </div>

        <div ref={editorRef} className="pt-2">
          <Editor
            onUpdate={handleUpdateContent}
            onSave={handleSaveContent}
            content={page.content}
          />
        </div>
      </div>
    </>
  )
}
