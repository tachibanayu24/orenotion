import Head from 'next/head'
import { useRouter } from 'next/router'
import { ChangeEvent, ComponentProps, useCallback, useEffect, useState } from 'react'

import { JSONContent } from '@tiptap/core'

import { debounce } from '@/utils'

import { useCurrentUser, usePage } from '@/hooks'

import { Editor, PageHeader, PageSkeleton } from '@/components/uis'

type QueryType = {
  pageId: string
}

// TODO: ここからsubscribeして、ページがないエラーをキャッチしたらrootに理レンダリングすればいい気がする
export default function PageDetail() {
  const router = useRouter()
  const { page, listenPage, updatePage } = usePage()
  const { currentUser } = useCurrentUser()

  const { pageId } = router.query as QueryType

  const [isUpdating, setIsUpdating] = useState(false)
  const [content, setContent] = useState<JSONContent>()

  useEffect(() => {
    const unsubscribe = router.isReady ? listenPage(pageId) : () => void 0

    return () => unsubscribe()
  }, [listenPage, pageId, router.isReady])

  const handleUpdateEmoji = async (emoji: string) => {
    await updatePage(pageId, { emoji })
  }

  const handleUpdateTitle = debounce(async (e: ChangeEvent<HTMLInputElement>) => {
    setIsUpdating(true)

    await updatePage(pageId, { title: e.target.value }, () =>
      setTimeout(() => {
        setIsUpdating(false)
      }, 500)
    )
  }, 1000)

  const handleUpdatePublishedAt = async (value: boolean) => {
    setIsUpdating(true)

    await updatePage(pageId, { publishedAt: value ? new Date() : null }, () => {
      setTimeout(() => {
        setIsUpdating(false)
      }, 500)
    })
  }

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const handleUpdateContent = useCallback(
    debounce(async (json: JSONContent) => {
      console.log(json)
      setContent(json)
      setIsUpdating(true)
      await updatePage(pageId, { content: json }, () =>
        setTimeout(() => {
          setIsUpdating(false)
        }, 500)
      )
    }, 1000),
    [pageId, updatePage]
  )

  const handleSaveContent = useCallback(
    async (json: Parameters<ComponentProps<typeof Editor>['onUpdate']>[0]) => {
      setIsUpdating(true)
      await updatePage(pageId, { content: json }, () =>
        setTimeout(() => {
          setIsUpdating(false)
        }, 500)
      )
    },
    [pageId, updatePage]
  )

  // TODO: listenしているが初期読み込みのローディングは取れないのか？
  if (!page) return <PageSkeleton />

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <PageHeader
          page={page}
          currentUser={currentUser}
          onSelectEmoji={handleUpdateEmoji}
          onChangeTitle={handleUpdateTitle}
          onChangePublishedAt={handleUpdatePublishedAt}
          isUpdating={isUpdating}
        />

        <div className="pt-2">
          <Editor
            // key="editorrr"
            onUpdate={handleUpdateContent}
            onSave={handleSaveContent}
            content={page.content}
            editable={Boolean(currentUser?.isAdmin)}
          />
        </div>
      </div>
    </>
  )
}
