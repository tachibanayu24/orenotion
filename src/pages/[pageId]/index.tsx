// 効いてなさそう
import 'highlight.js/styles/github-dark-dimmed.css'

import Head from 'next/head'
import router from 'next/router'
import { ChangeEvent, useState } from 'react'

import { format } from 'date-fns'

import { debounce } from '@/utils'

import { usePage } from '@/hooks'

import { Editor } from '@/components/uis/Editor'
import { EmojiPicker } from '@/components/uis/EmojiPicker'
import { Icon } from '@/components/uis/Icon/Icon'
import { IconButton } from '@/components/uis/Icon/IconButton/IconButton'
import { Tooltip } from '@/components/uis/Tooltip'

// import { useRouter } from 'next/router'
// import { useEffect } from 'react'

// import { PageRepository } from '@/repository/db/page/page.repository'

type QueryType = {
  pageId: string
}

// const pageRepo = new PageRepository()

export default function PageDetail() {
  // TODO: You should only use "next/router" on the client side of your app.
  const { pageId } = router.query as QueryType

  const { pages, updatePage } = usePage()
  const [isUpdating, setIsUpdating] = useState(false)
  // console.log(pages)

  const page = pages?.find((p) => p.id === pageId)
  // console.log(page)
  // const router = useRouter()

  // useEffect(() => {
  //   // if (router.isReady) console.log('PageDetail', pageRepo.get(pageId))
  // }, [pageId, router])

  const handleUpdateEmoji = (emoji: string) => {
    updatePage(pageId, { emoji })
  }

  const handleUpdateTitle = debounce(async (e: ChangeEvent<HTMLInputElement>) => {
    setIsUpdating(true)
    await updatePage(pageId, { title: e.target.value }, () =>
      setTimeout(() => {
        setIsUpdating(false)
      }, 500)
    )
  }, 1000)

  const [emojiOpen, setEmojiOpen] = useState(false)

  console.log(page?.createdAt)

  if (!page) return <></>

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div>
        <div className="sticky top-0 bg-slate-900 z-floating -mt-4 pt-4">
          <div className="flex justify-between items-center">
            <span className="text-sm">🎉 イベント / 🛩️ イタリア旅行</span>
            <Tooltip position="bottom-left" component="シェアする">
              <IconButton icon="twitter" size="md" />
            </Tooltip>
          </div>

          <div className="px-2 py-4">
            <div className="flex items-center gap-1 text-3xl mb-2">
              <EmojiPicker
                isOpen={emojiOpen}
                onOpen={() => {
                  console.log('clicec')
                  setEmojiOpen(true)
                }}
                onClose={() => setEmojiOpen(false)}
                onSelect={handleUpdateEmoji}
              >
                <button className="w-11 h-11 text-3xl p-1 hover:bg-white hover:bg-opacity-10 rounded-md">
                  {page?.emoji}
                </button>
              </EmojiPicker>
              <input
                defaultValue={page?.title}
                placeholder="Untitle"
                onChange={handleUpdateTitle}
                className="w-full bg-transparent font-extrabold  outline-none"
              />
            </div>
            <div className="text-xs text-slate-300 flex justify-between">
              <div>
                <span className="mr-4">
                  作成日時 {format(page.createdAt, 'yyyy/MM/dd(eee) HH:mm')}
                </span>
                <span>
                  更新日時{' '}
                  {page.updatedAt ? format(page.updatedAt, 'yyyy/MM/dd(eee) HH:mm') : '---'}
                </span>
              </div>
              {isUpdating && (
                <span>
                  <div className="flex gap-2 items-center">
                    <Icon icon="spin" size="sm" shouldSpin /> 保存中...
                  </div>
                </span>
              )}
            </div>
          </div>

          <hr className="border-slate-500 mt-2" />
        </div>

        <div className="pt-2">
          <Editor />
        </div>
      </div>
    </>
  )
}
